// Code generated by ent, DO NOT EDIT.

package ent

import (
	"hyphen-backend-hellog/ent/comment"
	"hyphen-backend-hellog/ent/post"
	"hyphen-backend-hellog/ent/schema"
	"hyphen-backend-hellog/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	commentFields := schema.Comment{}.Fields()
	_ = commentFields
	// commentDescContent is the schema descriptor for content field.
	commentDescContent := commentFields[0].Descriptor()
	// comment.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	comment.ContentValidator = func() func(string) error {
		validators := commentDescContent.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(content string) error {
			for _, fn := range fns {
				if err := fn(content); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// commentDescCreatedAt is the schema descriptor for created_at field.
	commentDescCreatedAt := commentFields[1].Descriptor()
	// comment.DefaultCreatedAt holds the default value on creation for the created_at field.
	comment.DefaultCreatedAt = commentDescCreatedAt.Default.(func() time.Time)
	// commentDescUpdatedAt is the schema descriptor for updated_at field.
	commentDescUpdatedAt := commentFields[2].Descriptor()
	// comment.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	comment.DefaultUpdatedAt = commentDescUpdatedAt.Default.(func() time.Time)
	postFields := schema.Post{}.Fields()
	_ = postFields
	// postDescTitle is the schema descriptor for title field.
	postDescTitle := postFields[0].Descriptor()
	// post.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	post.TitleValidator = func() func(string) error {
		validators := postDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// postDescContent is the schema descriptor for content field.
	postDescContent := postFields[1].Descriptor()
	// post.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	post.ContentValidator = postDescContent.Validators[0].(func(string) error)
	// postDescPreviewImage is the schema descriptor for preview_image field.
	postDescPreviewImage := postFields[2].Descriptor()
	// post.PreviewImageValidator is a validator for the "preview_image" field. It is called by the builders before save.
	post.PreviewImageValidator = func() func(string) error {
		validators := postDescPreviewImage.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(preview_image string) error {
			for _, fn := range fns {
				if err := fn(preview_image); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// postDescIsPrivate is the schema descriptor for is_private field.
	postDescIsPrivate := postFields[3].Descriptor()
	// post.DefaultIsPrivate holds the default value on creation for the is_private field.
	post.DefaultIsPrivate = postDescIsPrivate.Default.(bool)
	// postDescCreatedAt is the schema descriptor for created_at field.
	postDescCreatedAt := postFields[4].Descriptor()
	// post.DefaultCreatedAt holds the default value on creation for the created_at field.
	post.DefaultCreatedAt = postDescCreatedAt.Default.(func() time.Time)
	// postDescUpdatedAt is the schema descriptor for updated_at field.
	postDescUpdatedAt := postFields[5].Descriptor()
	// post.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	post.DefaultUpdatedAt = postDescUpdatedAt.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescIDFromUserMs is the schema descriptor for id_from_user_ms field.
	userDescIDFromUserMs := userFields[0].Descriptor()
	// user.IDFromUserMsValidator is a validator for the "id_from_user_ms" field. It is called by the builders before save.
	user.IDFromUserMsValidator = userDescIDFromUserMs.Validators[0].(func(int) error)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescProfileImage is the schema descriptor for profile_image field.
	userDescProfileImage := userFields[2].Descriptor()
	// user.ProfileImageValidator is a validator for the "profile_image" field. It is called by the builders before save.
	user.ProfileImageValidator = func() func(string) error {
		validators := userDescProfileImage.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(profile_image string) error {
			for _, fn := range fns {
				if err := fn(profile_image); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescJoinedAt is the schema descriptor for joined_at field.
	userDescJoinedAt := userFields[3].Descriptor()
	// user.DefaultJoinedAt holds the default value on creation for the joined_at field.
	user.DefaultJoinedAt = userDescJoinedAt.Default.(func() time.Time)
}
